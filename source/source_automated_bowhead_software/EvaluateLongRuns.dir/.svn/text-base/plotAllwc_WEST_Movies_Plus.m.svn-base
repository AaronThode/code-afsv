% This program plots all whale call locations from all sites, from the WEST files  _v1 or _v2.% Each period (to be defined by user) is plotted separately.% The program ddsetup does NOT need to be run first.% Works as of 14 April 2008, but ONLY if data is not reloaded.% Did NOT work on 17 September 2008, regardless of reloading or not.% 11 Dec 08 - SDH fixed some errors%========================================fn='Sites3_4_lessThan40km.txt';    % Load zone 6 datafa='Site5_lessThan40km.txt';    % Load zone 7 data% fb='Site1DataForMovie.txt';    % Load zone 5 datafc='GilavarShots.txt';         % Load Gilavar shot filefd='HenryCShots.txt';          % Load Henry Christoffersen shot filefe='PGSShots.txt';             % Load PGS shot filefg='BowheadAerialSightings.txt';    % Load aerial sightings filereload=0;   % DON'T FORGET TO CHANGE THIS AS APPROPRIATE!!movieplotter=1;% load Site3WithDistanceToCenterline% load Site4WithDistanceToCenterline% load Site5WithDistanceToCenterline% load AerialSightings% load NorthstarMovieData% load Whales_shots_aerial_17Sep09disp(['---- Processing ',fn]);disp(['---- Processing ',fa]);% disp(['---- Processing ',fb]);disp(['---- Processing ',fc]);disp(['---- Processing ',fd]);disp(['---- Processing ',fe]);disp(['---- Processing ',fg]);infolder='/Users/apoflav/Documents/Matlab/Shell_08/' ;outfolder='/Users/apoflav/Documents/Matlab/Shell_08/Movie/' ;disp('Reading in DASAR locations');%% READ IN DASAR LOCATIONS -  Site 1=z5, sites 2,3,4=z6, site 5=z7.  Only%% sites 2, 3, 4, and 5 included below.  Updated to 2008 locations. SITE 5%% NOT UPDATED YET (last 7 numbers in DASARx and DASARy).DASARx=[ 427862 434042 428071 434228 428256 434383 428473 507443 513423 507391 513297 507313 513438 507288 548195 554222 548006 554037 547850 553987 547694 412725 418933 412980 419126 413306 419492 413509];DASARy=[ 7838133 7841486 7845226 7848536 7852211 7855533 7859232 7809002 7812543 7815958 7818791 7823006 7826502 7829998 7794379 7798013 7801418 7805074 7808338 7812028 7815385 7795000 7798183 7801964 7805312 7809125 7812561 7816079];DASAR_Site1x=[ 585998 591849 585696 591597 585418 591334 585360 601189 604291 608034 611047 614848 ];DASAR_Site1y=[ 7855861 7859548 7862891 7866569 7869901 7873604 7877035 7843127 7849567 7843460 7849880 7843791 ];DASAR_Northstarx=[ 444656 441387 448529 445017 451989 448669 455628 452290 459196 455884 ];DASAR_Northstary=[ 7824827 7830966 7830697 7837034 7836860 7843074 7842926 7849042 7848855 7855052 ];zoneFive=['05 W'];zoneSix=['06 W'];zoneSeven=['07 W'];numSevens=7; % The number of DASARS (DASARx's and DASARy's) which are in zone 7 must occur at the end of the list.% Assumes the rest are in zone 6 (for the moment - site 1 will be in zone 5)% Convert all utms to lat longs - repmat = replicate and tile array.  B = repmat(A,m,n) creates a matrix B% consisting of an m by n tiling of copies of A.  We're creating an array of 1 column and x lines of "zone".DASARzoneFive=repmat(zoneFive,12,1);DASARzoneSix=repmat(zoneSix,length(DASARx)-numSevens,1);DASARzoneSixAlso=repmat(zoneSix,10,1);   % These are the Northstar DASARsDASARzoneSeven=repmat(zoneSeven,numSevens,1);myZones=[DASARzoneSix ; DASARzoneSeven]; % myZones is DASARzoneSix and DASARzoneSeven stringed together.myZonesB=[DASARzoneFive];myZonesC=[DASARzoneSixAlso];[DASARlat DASARlon]=utm2deg(DASARx,DASARy,myZones);  % Last seven DASARs = site 5: are in zone 7[DASAROnelat DASAROnelon]=utm2deg(DASAR_Site1x,DASAR_Site1y,myZonesB);[DASARNorthstarlat DASARNorthstarlon]=utm2deg(DASAR_Northstarx, DASAR_Northstary,myZonesC);%% Get user input before reloadingstartDate='16-8-2008';datePrompt=['Enter a start date (dd-mm-yyyy) [Default: ' startDate '] : '];startDateIn=input(datePrompt,'s');if ~isempty(startDateIn)                % don't use default value set above    startDate=startDateIn;endstartDateNum=datenum(startDate,'dd-mm-yyyy');  % datenum: convert date & time to serial date number% don't even really need this (yet) but% may be handy for generating titles, etc.[sd sm sy]=datevec(startDateNum);              % datevec: convert date and time to vector of components% if multiplotter%     mapInterval=input('Enter a multiplot interval (days) [Default 4]: ');%     if isempty(mapInterval)%         mapInterval=4;%     end% end % if multiplotterif movieplotter    movieInterval=input('Enter a movie interval (hours) [Default 4]: ');    if isempty(movieInterval)        movieInterval=4;        mapInterval=4;    endend % if movieplotter%% OPEN FILES AND SAVE SELECTED DATAif reload        % LOAD ZONE 6 FILE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    fid=fopen([infolder fn],'r');   % fid = fopen(filename, permission) opens file in the specified    % permission. 'r' = open file for reading    % fid is a file identifier, returns -1 if it cannot open the file.    il=0;                    % il is a line index: which line # from file are we processing    % wctm=[];wcx=[];wcy=[];    disp('Loading data ...');    % print 'Loading data...';    while feof(fid)==0          line=fgets(fid);  % line is a ML function that creates a line object        % in this case, it is a poorly chosen variable name        % Bill's function reads one line at a time from the file (using fgets)        % the value of that line is assigned to the variable 'line'        % and it is used in further processing in this loop, until it hits the        % end of the file.        if line ==-1    % == equals "is equal to" (comparison) -- as opposed to assigning the value with =            break       % break = terminate execution of for or while loop.  It only does this if            % line == -1 meaning there were no more lines to read from the file        end        il=il+1;        wctm(il)=str2num(TabField(line,1));  % Read in C-time        wcx(il)=str2num(TabField(line,2));   % TabField: n is nth field in tab-delimited file        wcy(il)=str2num(TabField(line,3));   % (with trailing and leading spaces removed)    end % Of while ~feof    ilmax=il;    % LOAD ZONE 7 FILE (SITE 5) %%%%%%%%%%%%%%%%%%%%%%%%%%%%    fid=fopen([infolder fa],'r');   % fid = fopen(filename, permission) opens file in the specified    % permission. 'r' = open file for reading    % fid is a file identifier, returns -1 if it cannot open the file.    ia=0;                           % ia is a line index: which line # from file are we processing    while feof(fid)==0          line=fgets(fid);  % line is a ML function that creates a line object        if line ==-1    % == equals "is equal to" (comparison) -- as opposed to assigning the value with =            break       % break = terminate execution of for or while loop. It only does this if            % line == -1 meaning there were no more lines to read from the file        end        ia=ia+1;        wcAtm(ia)=str2num(TabField(line,1));  % Read in C-time from site 5 file.        wcAx(ia)=str2num(TabField(line,2));   % TabField: n is nth field in tab-delimited file        wcAy(ia)=str2num(TabField(line,3));   % (with trailing and leading spaces removed)    end % Of while ~feof        iamax=ia;    %     % LOAD ZONE 5 FILE (SITE 1 and Eni) %%%%%%%%%%%%%%%%%%%%%%%     fid=fopen([infolder fb],'r');%     ib=0;                           % %     while feof(fid)==0  %         line=fgets(fid);  % %         if line ==-1    %             break       %         end% %         ib=ib+1;%         wcBtm(ib)=str2num(TabField(line,1));  %         wcBx(ib)=str2num(TabField(line,2));   %         wcBy(ib)=str2num(TabField(line,3));   %         %     end % Of while ~feof%     %     ibmax=ib;        disp('Done loading whale calls');    % LOAD GILAVAR SHOT FILE %%%%%%%%%%%%%%%%%%%%%%    fid=fopen([infolder fc],'r');    ic=0;                               while feof(fid)==0          line=fgets(fid);          if line ==-1                break               end        ic=ic+1;        gilavarlon(ic)=str2num(TabField(line,1));          gilavarlat(ic)=str2num(TabField(line,2));           gilavartm(ic)=datenum(TabField(line,3));     end % Of while ~feof         % LOAD HENRY CHRISTOFFERSEN SHOT FILE %%%%%%%%%%%%%%%%%%%%%%    fid=fopen([infolder fd],'r');    id=0;                               while feof(fid)==0          line=fgets(fid);          if line ==-1                break               end        id=id+1;        henryClon(id)=str2num(TabField(line,1));          henryClat(id)=str2num(TabField(line,2));           henryCtm(id)=datenum(TabField(line,3));     end % Of while ~feof        % LOAD PGS SHOT FILE %%%%%%%%%%%%%%%%%%%%%%    fid=fopen([infolder fe],'r');    ie=0;                               while feof(fid)==0          line=fgets(fid);          if line ==-1                break               end        ie=ie+1;        PGSlon(ie)=str2num(TabField(line,1));          PGSlat(ie)=str2num(TabField(line,2));           PGStm(ie)=datenum(TabField(line,3));     end % Of while ~feof        disp('Done loading whale calls and airgun shots');         % LOAD BOWHEAD AERIAL SIGHTINGS FILE  %%%%%%%%%%%%%%%%%%%%    fid=fopen([infolder fg],'r');    ig=0;                               while feof(fid)==0          line=fgets(fid);          if line ==-1                break               end        ig=ig+1;        aerialSightingslon(ig)=str2num(TabField(line,1));          aerialSightingslat(ig)=str2num(TabField(line,2));           aerialSightingstm(ig)=datenum(TabField(line,3));     end % Of while ~feof        disp('Done loading aerial sightings data');    else    disp('** Not reloading **');  % If not reloading say "not reloading" ...end % Of if reload%%% % CONVERT CALL UTMS TO LAT AND LONG% % Convert all utms to lat longs - repmat = replicate and tile array.% % B = repmat(A,m,n) creates a matrix B consisting of an m by n tiling of% % copies of A.  So we are creating an array of 1 column and ilmax lines of "zone".% whaleCallZoneFive=repmat(zoneFive,ibmax,1);whaleCallZoneSix=repmat(zoneSix,ilmax,1);whaleCallZoneSeven=repmat(zoneSeven,iamax,1);if reload   % you only want to convert the whale call positions to degrees            % the first time you reload the data.    [wclat,wclon]=utm2deg(wcx',wcy',whaleCallZoneSix);    [wcAlat,wcAlon]=utm2deg(wcAx',wcAy',whaleCallZoneSeven);    % [wcBlat,wcBlon]=utm2deg(wcBx',wcBy',whaleCallZoneFive);end                       % DEFINE TIME INTERVALS FOR MOVIESsecsInHour=60*60;                           % That's 3600 secondsmovieIntervalSecs=movieInterval*secsInHour;      % How many seconds in one "map interval"movieTime=mltoshelldate(startDate);        % set movie time incrementTime=movieTime;    % set a starting point to add interval to% overallMaxTime = max([max(wctm) max(wcAtm) max(wcBtm)]); % Overall max is max of wctm or wcAtmoverallMaxTime = max([max(wctm) max(wcAtm)]);firstTime=1;lastperiod = movieInterval*secsInHour;firstInterval = movieInterval*secsInHour;  while incrementTime <= (overallMaxTime)     % Do this as long as we've not reached the eof    if incrementTime+lastperiod > overallMaxTime        incrementTime=incrementTime+lastperiod ;    elseif firstTime       % First map should contain 5 days (b/c of deployments)        incrementTime = incrementTime+firstInterval;        firstTime = 0;    else        incrementTime = incrementTime+movieIntervalSecs;    end % if firstTime    movieTime=[movieTime; incrementTime]; % periodTime is a column vector with two contents  ##WHY???end%% MOVIEPLOTTERif movieplotter        figure(100)    clf                         % clf = clear current figure window    set(gca,'Fontsize',10)      % set = set object properties, where we have property, propertyName, propertyValue.    % gca is the "current axes handle" (whatever that means)    % SH: gca is just the "handle" -- the holder -- referring to figure 1.    % CREATE MAP USING MMAP TOOLBOX    mapmidLon=-147;  % Set middle of latitude and longitude values    mapmidLat=70.7;    maplimits=[-141 69.85]; % Zoom level - this is right edge and bottom of map    m_proj('stereographic','lon',mapmidLon,'lat',mapmidLat,'rad',maplimits,'rec','on');    m_grid('color',[.3 .3 .3],'linestyle','-');    snap1=[]; snap2=[]; snap3=[]; snap4=[];     % Define four arrays which will contain the black & gray locations    color1=[0 0 0];color2=[0.35 0.35 0.35];color3=[0.65 0.65 0.65];color4=[0.85 0.85 0.85];    shotcolor=[0 0 1];lastshotcolor=[.25 .5 1];  % Was [0.5 0.5 1]    aerialSightingcolor=[0 1 0]; lastsightcolor=[0 1 0];   % color1=[1 0 0];color2=[1 1 0];color3=[0 0 1];color4=[0.75 0.75 0.75];    % wctmTotal=[wctm wcAtm wcBtm];    wctmTotal=[wctm wcAtm];    % wclonTotal=[wclon; wcAlon; wcBlon];    wclonTotal=[wclon; wcAlon];    % wclatTotal=[wclat; wcAlat; wcBlat];    wclatTotal=[wclat; wcAlat];    shootingtmTotal=[gilavartm henryCtm PGStm];    shootinglonTotal=[gilavarlon henryClon PGSlon];    shootinglatTotal=[gilavarlat henryClat PGSlat];    aerialSightingstmTotal=[aerialSightingstm];    aerialSightingslonTotal=[aerialSightingslon];    aerialSightingslatTotal=[aerialSightingslat];    periodnums=length(movieTime);    plotMarkerSize=2;       northstarSiteIn= datenum('August 26, 2008  08:00:00.000 PM');    northstarSiteOut= datenum('September 25, 2008  04:00:00.000 PM');    siteFiveIn = datenum('August 19, 2008  08:00:00.000 AM');  % Site 5 is deployed    siteFiveOut = datenum('October 3, 2008  01:30:00.000 AM');  % Site 5 is retrieved    siteFourIn = datenum('August 20, 2008  08:00:00.000 AM');  % Site 4 is deployed    siteFourOut = datenum('October 4, 2008  11:45:00.000 PM');  % Site 4 is retrieved    siteThreeIn = datenum('August 21, 2008  08:00:00.000 AM');  % Site 3 is deployed    siteThreeOut = datenum('October 5, 2008  08:15:00.000 PM');  % Site 3 is retrieved    siteTwoIn = datenum('August 16, 2008  03:00:00.000 AM');  % Site 2 is deployed    siteTwoOut = datenum('October 6, 2008  09:00:00.000 PM');  % Site 2 is retrieved    siteOneIn = datenum('August 17, 2008  01:00:00.000 PM');  % Site 2 is deployed    siteOneOut = datenum('October 7, 2008  08:15:00.000 PM');  % Site 2 is retrieved    lastshot=[];    lastsight=[];    lastsightTwo=[];    lastsightThree=[];    % for movieInd=300:320         for movieInd=1:periodnums-1              % ind I presume is index        loopStart = movieTime(movieInd);    % SH: this looks up the movieTime corresponding to the index        loopEnd =  movieTime(movieInd+1);   % his finds the next movie time (i.e., the end time.)        dateoutStart=datestr(shelltomldate(loopStart),1);        dateoutTime=datestr(shelltomldate(loopStart),15);        dateoutEnd=datestr(shelltomldate(loopEnd),15);        testtitle = [ dateoutStart(1:length(dateoutStart)-5) ' ' dateoutTime];        % sTitle=eval(['title' num2str(ind)]);        sTitle=testtitle;        snap4=snap3;snap3=snap2;snap2=snap1;        m_grid('color',[.7 .7 .7],'linestyle','-');        snap1=find((wctmTotal >= loopStart) & (wctmTotal < loopEnd));        % Lines below are to find shooting times and aerial survey times:        sight=find((aerialSightingstmTotal >= shelltomldate(loopStart)) & (aerialSightingstmTotal < shelltomldate(loopEnd)));        shoot=find((shootingtmTotal >= shelltomldate(loopStart)) & (shootingtmTotal < shelltomldate(loopEnd)));        % find firing status%         fireMidPoint= shelltomldate((loopStart+loopEnd)/2);%         firingNow=0;        % if you get an error here you need to read in firingtimes.mat       %         for fireInd=1:length(fireend)%             if ((fireMidPoint > firestart(fireInd)) && (fireMidPoint <%             fireend(fireInd)))%                 firingNow=1;%             end % if is in range%         end % for fireInd%        %         if firingNow%             m_line(-141.1,70.95,'clip','point','marker','o','MarkerSize',16,'MarkerFaceColor',[0.4 0.6 1],'MarkerEdgeColor',[1 1 1],'LineStyle','none');%         end % if firingNow                % Plot black and gray calls:        if ~isempty(snap4)            m_line(wclonTotal(snap4),wclatTotal(snap4),'clip','point','marker','o','MarkerSize',plotMarkerSize,'MarkerFaceColor',color4,'MarkerEdgeColor','none','LineStyle','none');         %   m_usercoast('alaska-hi','patch',[.7 .7 .7],'linestyle','none');        end        if ~isempty(snap3)            m_line(wclonTotal(snap3),wclatTotal(snap3),'clip','point','marker','o','MarkerSize',plotMarkerSize,'MarkerFaceColor',color3,'MarkerEdgeColor','none','LineStyle','none');         %   m_usercoast('alaska-hi','patch',[.7 .7 .7],'linestyle','none');        end        if ~isempty(snap2)            m_line(wclonTotal(snap2),wclatTotal(snap2),'clip','point','marker','o','MarkerSize',plotMarkerSize,'MarkerFaceColor',color2,'MarkerEdgeColor','none','LineStyle','none');         %   m_usercoast('alaska-hi','patch',[.7 .7 .7],'linestyle','none');        end        if ~isempty(snap1)            m_line(wclonTotal(snap1),wclatTotal(snap1),'clip','point','marker','o','MarkerSize',plotMarkerSize,'MarkerFaceColor',color1,'MarkerEdgeColor','none','LineStyle','none');        %    m_usercoast('alaska-hi','patch',[.7 .7 .7],'linestyle','none');        end                % Plot relevant DASAR sites        % Define deployment times of different DASAR sites        myLoopEnd = shelltomldate(loopEnd);                if ((myLoopEnd > northstarSiteIn) && (myLoopEnd <= northstarSiteOut)) % Plot Northstar site if relevant            m_line(DASARNorthstarlon(1:10),DASARNorthstarlat(1:10),'clip','point','marker','^','MarkerSize',4, 'MarkerFaceColor','r','MarkerEdgeColor','r','LineStyle','none');        end        if ((myLoopEnd > siteFiveIn) && (myLoopEnd <= siteFiveOut)) % Plot site 5 if relevant            m_line(DASARlon(22:28),DASARlat(22:28),'clip','point','marker','^','MarkerSize',4, 'MarkerFaceColor','r','MarkerEdgeColor','r','LineStyle','none');        end            if ((myLoopEnd > siteFourIn) && (myLoopEnd <= siteFourOut)) % Plot site 4 if relevant            m_line(DASARlon(15:21),DASARlat(15:21),'clip','point','marker','^','MarkerSize',4, 'MarkerFaceColor','r','MarkerEdgeColor','r','LineStyle','none');        end           if ((myLoopEnd > siteThreeIn) && (myLoopEnd <= siteThreeOut)) % Plot site 3 if relevant            m_line(DASARlon(8:14),DASARlat(8:14),'clip','point','marker','^','MarkerSize',4, 'MarkerFaceColor','r','MarkerEdgeColor','r','LineStyle','none');        end        if ((myLoopEnd > siteTwoIn) && (myLoopEnd <= siteTwoOut)) % Plot site 2 if relevant            m_line(DASARlon(1:7),DASARlat(1:7),'clip','point','marker','^','MarkerSize',4, 'MarkerFaceColor','r','MarkerEdgeColor','r','LineStyle','none');        end        if ((myLoopEnd > siteOneIn) && (myLoopEnd <= siteOneOut)) % Plot site 1 if relevant            m_line(DASAROnelon(1:12),DASAROnelat(1:12),'clip','point','marker','^','MarkerSize',4, 'MarkerFaceColor','r','MarkerEdgeColor','r','LineStyle','none');        end                if ~isempty(lastshot)   % Plot airgun shooting            m_line(shootinglonTotal(lastshot),shootinglatTotal(lastshot),'clip','point','marker','o','MarkerSize',4.5,'MarkerFaceColor',lastshotcolor,'MarkerEdgeColor','none','LineStyle','none');        end        if ~isempty(shoot)            m_line(shootinglonTotal(shoot),shootinglatTotal(shoot),'clip','point','marker','o','MarkerSize',4.5,'MarkerFaceColor','b','MarkerEdgeColor','none','LineStyle','none');        end        lastshot=shoot;                if ~isempty(lastsightThree)   % Plot aerial sightings            m_line(aerialSightingslonTotal(lastsightThree),aerialSightingslatTotal(lastsightThree),'clip','point','marker','p','MarkerSize',8,'MarkerFaceColor',[0 .75 0],'MarkerEdgeColor','none','LineStyle','none');        end        if ~isempty(lastsightTwo)   % Plot aerial sightings            m_line(aerialSightingslonTotal(lastsightTwo),aerialSightingslatTotal(lastsightTwo),'clip','point','marker','p','MarkerSize',8,'MarkerFaceColor',[0 .85 0],'MarkerEdgeColor','none','LineStyle','none');        end        if ~isempty(lastsight)   % Plot aerial sightings            m_line(aerialSightingslonTotal(lastsight),aerialSightingslatTotal(lastsight),'clip','point','marker','p','MarkerSize',8,'MarkerFaceColor',[0 .95 0],'MarkerEdgeColor','none','LineStyle','none');        end        if ~isempty(sight)            m_line(aerialSightingslonTotal(sight),aerialSightingslatTotal(sight),'clip','point','marker','p','MarkerSize',8,'MarkerFaceColor',[0 1 0],'MarkerEdgeColor','none','LineStyle','none');        end        lastsightThree=lastsightTwo;        lastsightTwo=lastsight;        lastsight=sight;        % alaska-hi (and alaska-full) are subsets of the GSHHS data set.        % the normal command for the coastline is just m_coast        m_usercoast('alaska-hi','patch',[.7 .7 .7],'linestyle','none');                % Draw "frame" for wind bar:%         xf1 = -141.2;   xf2 = -141.4;    xf3 = -141.24;   xf4 = -141.03;%         yf1 = 70.095;  yf2 = 70.1;  yf3 = 70.8; yf4 = 70.795;%         windBarFrameLons = [xf1 xf2 xf3 xf4 xf1];%         windBarFrameLats = [yf1 yf2 yf3 yf4 yf1];%         maxWindSpeed=47;%  		m_patch(windBarFrameLons,windBarFrameLats,[1 1 1],'edgecolor',[0.7 0.7 0.7],'linewi',1.5);%         %         % Find variables for wind bar:%         myWindSamples=find((WindTime > loopStart) & (WindTime <= loopEnd));%         meanWind=mean(WindSpeed(myWindSamples));        % Calculate mean wind here%         leftTopOfWindBar=((meanWind / maxWindSpeed)*(yf3-yf2)) + yf2;  %  70.8 lat N will be top                 % Define limits of "wind bar":%         leftWindBarLat=yf2+((meanWind / maxWindSpeed)*(yf3-yf2));%         rightWindBarLat=leftWindBarLat-(yf3-yf4);%         leftWindBarLon=xf2-((meanWind / maxWindSpeed)*(xf2-xf3));%         rightWindBarLon=xf1-((meanWind / maxWindSpeed)*(xf1-xf4));%         xw1 = xf1;   xw2 = xf2;    xw3 = leftWindBarLon;   xw4 = rightWindBarLon;%         yw1 = yf1;  yw2 = yf2;  yw3 = leftWindBarLat; yw4 = rightWindBarLat;%         windBarLons = [xw1 xw2 xw3 xw4 xw1];%         windBarLats = [yw1 yw2 yw3 yw4 yw1];%         %         % Plot wind bar%         m_patch(windBarLons,windBarLats,[0.7 0.7 0.7],'edgecolor',[0.7 0.7 0.7],'linewi',0.1);        filenamestart=sprintf('%dHourMoviePlots%03d',movieInterval,movieInd);        figurename=strcat(filenamestart,'.png');        title(sTitle);        % Was -152.6, 70.1 etc ...        m_line(-142.2,71.3,'marker','o','MarkerSize',4.5,'MarkerFaceColor','b','MarkerEdgeColor','none','LineStyle','none');        m_text(-142.1,71.3,[' Airgun activity'],'color',[0 0 0],'fontweight','normal','fontsize',8);        m_line(-142.2,71.2,'marker','p','MarkerSize',8,'MarkerFaceColor',[0 1 0],'MarkerEdgeColor','none','LineStyle','none');        m_text(-142.1,71.2,[' Aerial sighting'],'color',[0 0 0],'fontweight','normal','fontsize',8);        %        m_text(-152.5,70,'marker','o','MarkerSize',4.5,'MarkerFaceColor','b'); %,['  Active airgun activity'],'color',[0 0 0],'fontweight','normal','fontsize',8);        print('-dpng',figurename);        disp(['Saving: ' figurename]);        set(gca,'Fontsize',10);        clf; % clear the figure    end % for movieTimesend % if movieplotter% Marker Specifier% Description% '+'	Plus sign% 'o'	Circle% '*'	Asterisk% '.'	Point% 'x'	Cross% 's'	Square% 'd'	Diamond% '^'	Upward-pointing triangle% 'v'	Downward-pointing triangle% '>'	Right-pointing triangle% '<'	Left-pointing triangle% 'p'	Five-pointed star (pentagram)% 'h'	Six-pointed star (hexagram)% 'none'	No marker (default)